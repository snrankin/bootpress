//// ======================================================================== //
/// @name   _fluid-type
/// @group  BootPress
/// @since  1.0.0
/// @author Sam Rankin <samrankin.dev@gmail.com>
/// ======================================================================= ////

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// @link https://github.com/Jakobud/poly-fluid-sizing

@mixin poly-fluid-sizing($properties, $map) {
    // Get the number of provided breakpoints
    $length: length(map-keys($map));

    // Error if the number of breakpoints is < 2
    @if ($length < 2) {
        @error 'poly-fluid-sizing() $map requires at least values';
    }

    // Sort the map by viewport width (key)
    $map: map-sort($map);
    $keys: map-keys($map);

    // Minimum size
    @each $property in $properties {
        #{$property}: map-get($map, nth($keys, 1));
    }

    // Interpolated size through breakpoints
    @for $i from 1 through ($length - 1) {
        @media (min-width: nth($keys,$i)) {
            @each $property in $properties {
                #{$property}: linear-interpolation(
                    (
                        nth($keys, $i): map-get($map, nth($keys, $i)),
                        nth($keys, ($i + 1)):
                            map-get($map, nth($keys, ($i + 1)))
                    )
                );
            }
        }
    }

    // Maxmimum size
    @media (min-width: nth($keys,$length)) {
        @each $property in $properties {
            #{$property}: map-get($map, nth($keys, $length));
        }
    }
}
