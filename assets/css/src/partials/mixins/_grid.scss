//// ======================================================================== //
/// @name   _grid
/// @group  BootPress
/// @since  1.0.0
/// @author Sam Rankin <samrankin.dev@gmail.com>
/// ======================================================================= ////

/// Grid system
//
// Generate semantic grid columns with these mixins.

// ==================== Generating section padding styles =================== //
@mixin section-padding(
    $padding,
    $prop: null,
    $y-multiplier: 2,
    $x-multiplier: 1,
    $important: false
) {
    @if $prop== 't' or $prop== 'y' {
        @if $important==true {
            padding-top: #{$padding * $y-multiplier} !important;
        } @else {
            padding-top: #{$padding * $y-multiplier};
        }
    }

    @if $prop== 'b' or $prop== 'y' {
        @if $important==true {
            padding-bottom: #{$padding * $y-multiplier} !important;
        } @else {
            padding-bottom: #{$padding * $y-multiplier};
        }
    }

    @if $prop== 'l' or $prop== 'x' {
        @if $important==true {
            padding-left: #{$padding * $y-multiplier} !important;
        } @else {
            padding-left: #{$padding * $y-multiplier};
        }
    }

    @if $prop== 'r' or $prop== 'x' {
        @if $important==true {
            padding-right: #{$padding * $y-multiplier} !important;
        } @else {
            padding-right: #{$padding * $y-multiplier};
        }
    }

    @if $prop==null {
        @if $important==true {
            padding: #{$padding * $y-multiplier} !important;
        } @else {
            padding: #{$padding * $y-multiplier};
        }
    }
}

// ================= For generating section padding classes ================= //
@mixin section-padding-classes(
    $section-padding: $grid-padding,
    $prop: $directions,
    $y-multiplier: 2,
    $x-multiplier: 1,
    $breakpoints: $grid-breakpoints
) {
    @each $direction in $directions {
        @if $direction !=null {
            .sp-#{$direction} {
                @each $breakpoint, $padding in $section-padding {
                    @include media-breakpoint-up($breakpoint) {
                        @include section-padding(
                            $padding,
                            $direction,
                            $y-multiplier,
                            $x-multiplier,
                            true
                        );
                    }
                }
            }
        } @else {
            .sp {
                @each $breakpoint, $padding in $section-padding {
                    @include media-breakpoint-up($breakpoint) {
                        @include section-padding(
                            $padding,
                            $direction,
                            $y-multiplier,
                            $x-multiplier,
                            true
                        );
                    }
                }
            }
        }

        @each $breakpoint, $padding in $section-padding {
            $infix: breakpoint-infix($breakpoint, $breakpoints);

            @if $direction !=null {
                @include media-breakpoint-up($breakpoint) {
                    .sp#{$infix}-#{$direction} {
                        @include section-padding(
                            $padding,
                            $direction,
                            $y-multiplier,
                            $x-multiplier,
                            true
                        );
                    }
                }
            } @else {
                @include media-breakpoint-up($breakpoint) {
                    .sp#{$infix} {
                        @include section-padding(
                            $padding,
                            $direction,
                            $y-multiplier,
                            $x-multiplier,
                            true
                        );
                    }
                }
            }
        }
    }
}

// =================== For generating grid padding classes ================== //

// Creates classes that have horizontal padding which will force content to stay
// within the main container even if the parent is full width
@mixin grid-padding(
    $max-widths: $container-max-widths,
    $breakpoints: $grid-breakpoints
) {
    .gp {
        @each $breakpoint, $container-max-width in $max-widths {
            @include media-breakpoint-up($breakpoint, $breakpoints) {
                padding-left: calc(
                    (100vw - #{$container-max-width}) / 2
                ) !important;
                padding-right: calc(
                    (100vw - #{$container-max-width}) / 2
                ) !important;
            }
        }
    }

    .gp-r {
        @each $breakpoint, $container-max-width in $max-widths {
            @include media-breakpoint-up($breakpoint, $breakpoints) {
                padding-right: calc(
                    (100vw - #{$container-max-width}) / 2
                ) !important;
            }
        }
    }

    .gp-l {
        @each $breakpoint, $container-max-width in $max-widths {
            @include media-breakpoint-up($breakpoint, $breakpoints) {
                padding-left: calc(
                    (100vw - #{$container-max-width}) / 2
                ) !important;
            }
        }
    }

    @each $name, $prop in ('l': 'padding-left', 'r': 'padding-right') {
        @each $breakpoint, $container-max-width in $max-widths {
            $infix: breakpoint-infix($breakpoint, $breakpoints);

            @include media-breakpoint-only($breakpoint, $breakpoints) {
                .gp#{$infix}-#{$name} {
                    #{$prop}: calc(
                        (100vw - #{$container-max-width}) / 2
                    ) !important;
                }
            }
        }
    }
}

// ========================== Bootstrap Grid system ========================= //
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
    margin-right: auto;
    margin-left: auto;
    margin-bottom: $gutter;
    &:last-child,
    &:only-child {
        margin-bottom: $gutter;
    }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
    $max-widths: $container-max-widths,
    $breakpoints: $grid-breakpoints
) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

@mixin make-row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
    margin-bottom: -$gutter;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
    margin-bottom: $gutter;
    display: flex;
    flex-direction: column;
}

@mixin make-col-content($gutter: $grid-gutter-width) {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    margin-bottom: -$gutter;
}

@mixin make-col-item($gutter: $grid-gutter-width) {
    display: block;
    margin-bottom: $gutter;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-auto() {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;

    margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
    & > * {
        flex: 0 0 100% / $count;
        max-width: 100% / $count;
    }
}
